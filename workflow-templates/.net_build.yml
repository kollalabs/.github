# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Build .NET Console App

on:
  push:
    branches: [ "main" ]
    tags: ["v*"]
  pull_request:
    branches: [ "*" ]
  
concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]
        platform: [x86]

    runs-on: windows-2019  

    env:
      Solution_Name: component-quickbookspos.sln                    # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: component-quickbookspos.csproj             # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
#      Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
#      Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Register QB SDK dll
        run: cmd /c regsvr32 /s D:\a\component-quickbookspos\component-quickbookspos\assets\QBPOSXMLRPLib.dll

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.1.3

    #      # Execute all unit tests in the solution
    #      - name: Execute unit tests
    #        run: dotnet test

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration /p:Platform=$env:Platform
        env:
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}

      # Build Solution
      - name: Build the application
        run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform
        env:
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}


    #      # Decode the base 64 encoded pfx and save the Signing_Certificate
    #      - name: Decode the pfx
    #        run: |
    #          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    #      # Create the app package by building and packaging the Windows Application Packaging project
    #      - name: Create the app package
    #        run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #        env:
    #          Appx_Bundle: Always
    #          Appx_Bundle_Platforms: x86|x64
    #          Appx_Package_Build_Mode: StoreUpload
    #          Configuration: ${{ matrix.configuration }}
    #
    #      # Remove the pfx
    #      - name: Remove the pfx
    #        run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx
    #
    #      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    #      - name: Upload build artifacts
    #        uses: actions/upload-artifact@v3
    #        with:
    #          name: MSIX Package
    #          path: ${{ env.Wap_Project_Directory }}\AppPackages

      - name: Get Repo Name and Version
        id: name_version
        shell: bash
        env:
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          #!/usr/bin/env bash
          
          COMPONENT_NAME=$(echo ${REPO_NAME#*-})
          REPO_NAME=$(echo ${REPO_NAME})

          echo "component_name=${COMPONENT_NAME}" >> $GITHUB_OUTPUT
          echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT

          REF_TYPE=$(echo ${GITHUB_REF} | cut -d'/' -f2)
          REF_NAME=$(echo ${GITHUB_REF} | cut -d'/' -f3)
          
          if [ "${REF_TYPE}" == "tags" ]; then
            TAG=$REF_NAME
            echo "do_upload=true" >> $GITHUB_OUTPUT
          else
            TAG="0.0.0"
            echo "do_upload=false" >> $GITHUB_OUTPUT
          fi

          echo "version=${TAG}" >> $GITHUB_OUTPUT
          echo "binary_name=${COMPONENT_NAME}_${TAG}_windows_386.exe" >> $GITHUB_OUTPUT

          echo "${TAG} - ${REF_TYPE} - ${REF_NAME} - ${REPO_NAME} - ${COMPONENT_NAME}_${TAG}_windows_386.exe"

      - name: Rename File
        if: ${{ steps.name_version.outputs.do_upload == 'true' }}  
        run: cp "D:\a\${{ steps.name_version.outputs.repo_name }}\${{ steps.name_version.outputs.repo_name }}\bin\x86\Release\${{ steps.name_version.outputs.repo_name }}.exe" "D:\a\${{ steps.name_version.outputs.repo_name }}\${{ steps.name_version.outputs.repo_name }}\bin\x86\Release\${{ steps.name_version.outputs.binary_name }}"

      - name: Auth to Google Cloud
        if: ${{ steps.name_version.outputs.do_upload == 'true' }}
        id: 'google-cloud-auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: "${{ secrets.GCP_STORAGE_WRITER }}"

      - name: Upload to Google Cloud Storage
        if: ${{ steps.name_version.outputs.do_upload == 'true' }}
        id: 'google-cloud-file-upload'
        uses: 'google-github-actions/upload-cloud-storage@v1'
        with:
          path: 'D:\a\${{ steps.name_version.outputs.repo_name }}\${{ steps.name_version.outputs.repo_name }}\bin\x86\Release\${{ steps.name_version.outputs.binary_name }}'
          destination: 'desktop_components'
        env:
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}
      
